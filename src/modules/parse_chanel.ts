export async function parseChanel(chanel_url: string) {
  const channel = await client.getEntity(CHANNEL_USERNAME);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
  const messages = await client.getMessages(channel, { limit: POST_LIMIT });

  for (const msg of messages) {
    if (msg.message) console.log("\nüìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:", msg.message);

    if (msg.media) {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–º –ø–æ—Å—Ç
      try {
        const link = await client.invoke(
          new Api.channels.ExportMessageLink({
            channel: channel as any,
            id: msg.id,
          }),
        );
        console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: ${link.link}`);
      } catch (e) {
        console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç:", e);
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
      if (msg.photo) {
        const sizes = msg.photo.sizes;
        const biggest = sizes[sizes.length - 1]; // –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        console.log(
          `üì∑ –§–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–æ—Å—Ç–µ: https://t.me/${CHANNEL_USERNAME}/${msg.id}`,
        );
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
      if (msg.document) {
        console.log(
          `üé¨ –í–∏–¥–µ–æ/—Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–æ—Å—Ç–µ: https://t.me/${CHANNEL_USERNAME}/${msg.id}`,
        );
      }
    }
  }
}
