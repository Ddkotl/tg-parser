import { Api, type TelegramClient } from "telegram";
import { editTextToAi } from "../utils/ai/edit_text_to_ai.js";
import { safeAiAsk } from "../utils/ai/safe_ai_ask.js";
import { isAdPost } from "../utils/is_ad_post.js";
import { getLinkToImg } from "../utils/get_link_to_img.js";
import { publishToInstagram } from "../public_content/public_inst.js";
import { cleaneAiText } from "../utils/ai/cleane_ai_text.js";
import type { ParseChanelData } from "../types.js";
import { publishCarouselToInstagram } from "../public_content/publish_carusel_to_inst.js";

// helper –¥–ª—è –ª–æ–≥–æ–≤
function log(step: string, msg: string, icon: string = "‚ÑπÔ∏è") {
  console.log(`[${new Date().toISOString()}] ${icon} ${step}: ${msg}`);
}

export async function parseChanel({ client, config }: ParseChanelData) {
  log("START", `–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ ${config.parsed_chanel_name}...`, "üöÄ");

  const channel = await client.getEntity(config.parsed_chanel_url);
  const messages = await client.getMessages(channel, {
    limit: config.post_count,
  });

  log("FETCH", `–ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ.`, "üì©");

  let counter = 1;
  const exception: string[] = [];
  const start_parse_data = Date.now();

  for (const [idx, msg] of messages.reverse().entries()) {
    log("MESSAGE", `–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è #${idx + 1}`, "‚ö°");

    const text = msg.message;
    if (!text) {
      log("SKIP", "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞", "‚è≠");
      continue;
    }

    if (msg.fwdFrom) {
      log("SKIP", "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "‚è≠");
      continue;
    }
    if (msg.pinned) {
      log("SKIP", "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "‚è≠");
      continue;
    }
    if (!msg.post) {
      log("SKIP", "–ù–µ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ", "‚è≠");
      continue;
    }

    const diff_hours = (Math.floor(start_parse_data / 1000) - msg.date) / (60 * 60);
    if (diff_hours >= config.diff_hour) {
      log("SKIP", `–°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ ${config.diff_hour} —á–∞—Å–æ–≤`, "‚è≠");
      continue;
    }

    if (isAdPost(text)) {
      log("SKIP", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç", "‚è≠");
      continue;
    }

    log("AI", "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É AI...", "ü§ñ");
    let modyfied_text_ru = await safeAiAsk(
      text,
      config.system_ai_promt_ru,
      editTextToAi,
      config.ai_temperature,
    );
    let modyfied_text_en = await safeAiAsk(
      text,
      config.system_ai_promt_en,
      editTextToAi,
      config.ai_temperature,
    );

    modyfied_text_ru = cleaneAiText(modyfied_text_ru);
    modyfied_text_en = cleaneAiText(modyfied_text_en);

    log(
      "AI",
      `–¢–µ–∫—Å—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã (RU: ${modyfied_text_ru.length} —Å–∏–º–≤–æ–ª–æ–≤, EN: ${modyfied_text_en.length} —Å–∏–º–≤–æ–ª–æ–≤).`,
      "‚úÖ",
    );

    const media = msg.media;

    if (msg.groupedId) {
      if (exception.includes(msg.groupedId.toString())) {
        log("SKIP", `–ê–ª—å–±–æ–º —Å groupedId=${msg.groupedId} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`, "‚è≠");
        continue;
      }
      exception.push(msg.groupedId.toString());

      const album = messages.filter((m) => m.groupedId?.toString() === msg.groupedId?.toString());
      const files = album
        .filter((m) => m.media instanceof Api.MessageMediaPhoto)
        .map((m) => m.media as Api.MessageMediaPhoto);

      if (files.length > 0) {
        log("SEND", `–ü—É–±–ª–∏–∫—É–µ–º –∞–ª—å–±–æ–º (${files.length} —Ñ–æ—Ç–æ) –≤ –∫–∞–Ω–∞–ª—ã...`, "üñº");

        await client.sendFile(config.my_chanel_url_ru, {
          file: files,
          caption: modyfied_text_ru,
          scheduleDate: Math.floor(Date.now() / 1000) + counter * 60 * 5,
          silent: true,
        });
        await client.sendFile(config.my_chanel_url_en, {
          file: files,
          caption: modyfied_text_en,
          scheduleDate: Math.floor(Date.now() / 1000) + counter * 60 * 5,
          silent: true,
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ Catbox
        const buffers: Buffer[] = [];
        for (const file of files) {
          const buf = await client.downloadMedia(file);
          if (buf && buf instanceof Buffer) buffers.push(buf);
        }

        if (buffers.length > 0) {
          log("UPLOAD", `–ó–∞–≥—Ä—É–∂–∞–µ–º ${buffers.length} —Ñ–æ—Ç–æ –Ω–∞ Catbox...`, "‚òÅÔ∏è");
          const urls: string[] = [];
          for (let i = 0; i < buffers.length; i++) {
            const url = await getLinkToImg(buffers[i] as Buffer, `telegram_album_${i}.jpg`);
            urls.push(url);
          }
          log("UPLOAD", `Catbox URLs: ${urls.join(", ")}`, "üåê");
          await publishCarouselToInstagram({ text: modyfied_text_ru, imgs: urls });
        }
      }
    } else if (media && media instanceof Api.MessageMediaPhoto) {
      log("SEND", "–ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª—ã...", "üñº");

      await client.sendFile(config.my_chanel_url_ru, {
        file: media,
        caption: modyfied_text_ru,
        scheduleDate: Math.floor(Date.now() / 1000) + counter * 60 * 5,
      });
      await client.sendFile(config.my_chanel_url_en, {
        file: media,
        caption: modyfied_text_en,
        scheduleDate: Math.floor(Date.now() / 1000) + counter * 60 * 5,
      });

      if (config.post_to_inst) {
        const buffer = await client.downloadMedia(msg);
        if (!buffer || !(buffer instanceof Buffer)) {
          log("ERROR", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ –∏–∑ Telegram", "‚ùå");
          continue;
        }

        log("UPLOAD", "–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ Catbox...", "‚òÅÔ∏è");
        const url = await getLinkToImg(buffer, "telegram.jpg");
        log("UPLOAD", `Catbox URL: ${url}`, "üåê");
        await publishToInstagram({ text: modyfied_text_ru, img: url });
      }
    } else {
      log("SEND", "–ü—É–±–ª–∏–∫—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª—ã...", "üìù");

      await client.sendMessage(config.my_chanel_url_ru, {
        message: modyfied_text_ru,
        schedule: Math.floor(Date.now() / 1000) + counter * 60 * 5,
      });
      await client.sendMessage(config.my_chanel_url_en, {
        message: modyfied_text_en,
        schedule: Math.floor(Date.now() / 1000) + counter * 60 * 5,
      });
    }

    counter++;
    log("DONE", `–°–æ–æ–±—â–µ–Ω–∏–µ #${counter - 1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.`, "‚úÖ");
  }

  log("END", `–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ ${config.parsed_chanel_name} –∑–∞–≤–µ—Ä—à–µ–Ω.`, "üèÅ");
}
