import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions/index.js";
import * as readline from "node:readline";
import * as fs from "fs";
import dotenv from "dotenv";
dotenv.config();

const apiId = process.env.TELEGRAM_CLIENT_API_ID;
const apiHash = process.env.TELEGRAM_CLIENT_API_HASH;
const SESSION_FILE = "./session.txt";

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
let sessionString = "";
if (fs.existsSync(SESSION_FILE)) {
  sessionString = fs.readFileSync(SESSION_FILE, "utf8");
}
let stringSession = new StringSession(sessionString);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª
function ask(query: string): Promise<string> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  return new Promise((resolve) =>
    rl.question(query, (ans) => {
      rl.close();
      resolve(ans.trim());
    }),
  );
}

(async () => {
  if (!apiHash || !apiId) {
    console.error(
      "‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_CLIENT_API_ID –∏–ª–∏ TELEGRAM_CLIENT_API_HASH",
    );
    process.exit(1);
  }

  console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...");

  const client = new TelegramClient(stringSession, +apiId, apiHash, {
    connectionRetries: 5,
  });

  await client.start({
    phoneNumber: async () => await ask("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "),
    password: async () =>
      await ask("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ Enter): "),
    phoneCode: async () => await ask("üì© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
    onError: (err) => console.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", err),
  });

  console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!");

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
  fs.writeFileSync(SESSION_FILE, stringSession.save());
  console.log("üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤", SESSION_FILE);

  // –ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–±–µ
  await client.sendMessage("me", { message: "Hello!" });

  console.log("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
  await client.disconnect();
  process.exit(0);
})();
